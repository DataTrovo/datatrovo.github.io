{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DataTrovo Documentation Welcome to the DataTrovo Documentation! DataTrovo is a powerful platform designed to bridge the gap between data-focused teams and business professionals. Whether you're a developer, data scientist, data engineer, or a business decision-maker, our platform provides a seamless workflow for delivering up-to-date data and analysis right when you need it. Follow this simple three-step process to get started with DataTrovo: Connect to your data sources and code repositories Configure your environment variables Execute your scripts DataTrovo is designed to be user-friendly, so you can focus on what you do best: analyzing data and making informed decisions. Let's get started! Documentation for Developers & System Admins Learn how to set up and manage DataTrovo for your organization. This section covers everything from creating execution environments to integrating scripts with our platform using Docker. Documentation for Business Teams Discover how to make the most of DataTrovo as a business user. This guide shows you how to search for scripts, run queries, and download data effortlessly to support better decision-making.","title":"Home"},{"location":"#datatrovo-documentation","text":"Welcome to the DataTrovo Documentation! DataTrovo is a powerful platform designed to bridge the gap between data-focused teams and business professionals. Whether you're a developer, data scientist, data engineer, or a business decision-maker, our platform provides a seamless workflow for delivering up-to-date data and analysis right when you need it. Follow this simple three-step process to get started with DataTrovo: Connect to your data sources and code repositories Configure your environment variables Execute your scripts DataTrovo is designed to be user-friendly, so you can focus on what you do best: analyzing data and making informed decisions. Let's get started!","title":"DataTrovo Documentation"},{"location":"#documentation-for-developers-system-admins","text":"Learn how to set up and manage DataTrovo for your organization. This section covers everything from creating execution environments to integrating scripts with our platform using Docker.","title":"Documentation for Developers &amp; System Admins"},{"location":"#documentation-for-business-teams","text":"Discover how to make the most of DataTrovo as a business user. This guide shows you how to search for scripts, run queries, and download data effortlessly to support better decision-making.","title":"Documentation for Business Teams"},{"location":"business/","text":"Documentation for Business Teams Welcome to the DataTrovo Business Teams documentation. In this section, you will learn how to: Search for scripts Run queries Download data These features enable you to make informed decisions efficiently and effectively, without needing deep technical expertise. Searching for Scripts Use the built-in search feature in DataTrovo to quickly locate scripts by title, description, or tags. This ensures that you and your team can easily find the analyses or reports you need. Running Queries and Scripts Once you find a script you want to run, simply click the Run or Download button (depending on the script type). DataTrovo will execute the script in the background and provide results when they are ready. Downloading Results DataTrovo offers multiple options for downloading results, such as CSV or Excel files. These downloads make it easy to share insights with colleagues or use data in external tools for further analysis. That\u2019s it! You\u2019re ready to leverage DataTrovo\u2019s capabilities to drive data-informed decisions across your organization. If you have any further questions or encounter any issues, don\u2019t hesitate to contact your system administrator or consult the Developer Documentation .","title":"Business Teams"},{"location":"business/#documentation-for-business-teams","text":"Welcome to the DataTrovo Business Teams documentation. In this section, you will learn how to: Search for scripts Run queries Download data These features enable you to make informed decisions efficiently and effectively, without needing deep technical expertise.","title":"Documentation for Business Teams"},{"location":"business/#searching-for-scripts","text":"Use the built-in search feature in DataTrovo to quickly locate scripts by title, description, or tags. This ensures that you and your team can easily find the analyses or reports you need.","title":"Searching for Scripts"},{"location":"business/#running-queries-and-scripts","text":"Once you find a script you want to run, simply click the Run or Download button (depending on the script type). DataTrovo will execute the script in the background and provide results when they are ready.","title":"Running Queries and Scripts"},{"location":"business/#downloading-results","text":"DataTrovo offers multiple options for downloading results, such as CSV or Excel files. These downloads make it easy to share insights with colleagues or use data in external tools for further analysis. That\u2019s it! You\u2019re ready to leverage DataTrovo\u2019s capabilities to drive data-informed decisions across your organization. If you have any further questions or encounter any issues, don\u2019t hesitate to contact your system administrator or consult the Developer Documentation .","title":"Downloading Results"},{"location":"developer/","text":"Developer Documentation Welcome to the DataTrovo Developer Documentation! This section is intended for developers and system administrators who need to set up and manage DataTrovo for their organizations. Whether you want to create custom execution environments, integrate scripts via Docker, or handle organizational account settings, this guide has you covered. DataTrovo offers two general ways of working with scripts: Git Connection : Link your Git repositories to DataTrovo and manage your queries through version control. Direct Connection : Connect DataTrovo directly to your data sources, and write and manage queries in DataTrovo itself.","title":"Introduction"},{"location":"developer/#developer-documentation","text":"Welcome to the DataTrovo Developer Documentation! This section is intended for developers and system administrators who need to set up and manage DataTrovo for their organizations. Whether you want to create custom execution environments, integrate scripts via Docker, or handle organizational account settings, this guide has you covered. DataTrovo offers two general ways of working with scripts: Git Connection : Link your Git repositories to DataTrovo and manage your queries through version control. Direct Connection : Connect DataTrovo directly to your data sources, and write and manage queries in DataTrovo itself.","title":"Developer Documentation"},{"location":"dev-docs/direct-sql/","text":"Direct Connection DataTrovo currently supports direct connections to the following data sources: PostgreSQL Set Up Database Connections Go to Settings > Connections > + to add a new connection. Select one of the supported databases. Complete the required connection fields. A symmetric key is used to encrypt passwords. Click Save . DataTrovo will test and save the connection. Write Queries Click New Query . Enter a Title and Description for the query. From the dropdown, choose the connection you created. Write your query in the editor. Click Save . Once saved, the query will appear on the homepage. You can click Download to run it and retrieve the results, or Edit to modify it.","title":"Direct SQL"},{"location":"dev-docs/direct-sql/#direct-connection","text":"DataTrovo currently supports direct connections to the following data sources: PostgreSQL","title":"Direct Connection"},{"location":"dev-docs/direct-sql/#set-up-database-connections","text":"Go to Settings > Connections > + to add a new connection. Select one of the supported databases. Complete the required connection fields. A symmetric key is used to encrypt passwords. Click Save . DataTrovo will test and save the connection.","title":"Set Up Database Connections"},{"location":"dev-docs/direct-sql/#write-queries","text":"Click New Query . Enter a Title and Description for the query. From the dropdown, choose the connection you created. Write your query in the editor. Click Save . Once saved, the query will appear on the homepage. You can click Download to run it and retrieve the results, or Edit to modify it.","title":"Write Queries"},{"location":"dev-docs/git/","text":"Git Connection Integrating Git with DataTrovo allows you to execute your scripts directly from a Git repository. This is beneficial for managing scripts via version control and aligning DataTrovo with your team\u2019s existing workflows. Use syntactic sugar to define your queries and let DataTrovo index the metadata, giving your team the flexibility to make scripts searchable, executable, and shareable across the organization. Leverage Docker to create a custom execution environment for your scripts. This allows your team to define and manage dependencies and configurations for any project. Currently, DataTrovo supports the following Git repositories: GitHub Set Up Git Connections To connect to your Git repository in DataTrovo: Go to Settings > Secrets > + to add all required environment variables for your scripts. A symmetric key is used to encrypt environment variables. Go to Settings > Connections > + to create a new connection. Select one of the supported repository providers. Fill in the required connection details. A symmetric key is used to encrypt PAT keys. DataTrovo will test and save the connection. Syntactic Sugar \u201cSyntactic sugar\u201d in DataTrovo allows you to embed metadata in your scripts so the platform can automatically index it. This metadata can include: The following comment structure is used for the respective languages: Python: #> R: #> SQL: --> Required Metadata title \u2014 The script\u2019s title as displayed in DataTrovo. description \u2014 A brief script description displayed in DataTrovo. run \u2014 The command used to run the script. You can use {file_path} to reference the script. output \u2014 The name of the output file generated in the project\u2019s root directory. Optional Metadata environment \u2014 A list of environment variables that the script requires. Additional Metadata as Tags Any additional metadata beyond the above required fields is indexed as tags. This can include authors, dates, columns, or any other information. These tags are searchable and visible in the DataTrovo UI. Examples .SQL Example : --> title: Top 100 facilities --> description: Download the top 100 facilities --> environment: [PGHOST, PGPORT, PGDATABASE, PGUSER, PGPASSWORD] --> columns: [facility_name, state, county] --> run: \"sh -c 'psql -f {file_path} --csv > output.csv'\" --> output: \"output.csv\" --> author: [John Doe] .R Example : #> title: R Top 100 facilities #> description: Download the top 100 facilities using R #> author: [R Master] #> environment: [PGHOST, PGPORT, PGDATABASE, PGUSER, PGPASSWORD] #> columns: [facility_name, state, county] #> run: \"Rscript {file_path}\" #> output: \"facilities_data.xlsx\" Docker Example Files: SQL Example R Example Each repository should include one Dockerfile in the root directory. This Dockerfile is used to build the execution environment for your scripts. The primary requirement is that the working directory be set to /app , as DataTrovo mounts your scripts into /app when the container starts. DataTrovo automatically rebuilds the Docker image whenever the Dockerfile changes, allowing you to modify scripts without incurring the overhead of a full image rebuild every time. This is achieved by volume-mounting the scripts into the container. However, this approach can cause certain limitations. For example, any dependencies installed in the project\u2019s root directory will be overwritten when the scripts are volume-mounted. This limitation can be avoided by installing dependencies in a temporary directory and copying the dependencies into the working directory at container startup. Example Operations in the Dockerfile : # Use a temporary directory for installing dependencies WORKDIR /opt/app # Install packages (e.g., using renv for R) RUN Rscript -e \"renv::restore()\" # Reset the working directory to /app WORKDIR /app # On container startup, copy the script into /app ENTRYPOINT [\"sh\", \"-c\", \"cp -r /opt/app/renv/library/ /app/renv/ && exec \\\"$@\\\"\", \"--\"] In this example, dependencies are installed in a subdirectory (/opt/app) , then the script is copied over at container startup, avoiding conflicts due to volume mounting.","title":"Git"},{"location":"dev-docs/git/#git-connection","text":"Integrating Git with DataTrovo allows you to execute your scripts directly from a Git repository. This is beneficial for managing scripts via version control and aligning DataTrovo with your team\u2019s existing workflows. Use syntactic sugar to define your queries and let DataTrovo index the metadata, giving your team the flexibility to make scripts searchable, executable, and shareable across the organization. Leverage Docker to create a custom execution environment for your scripts. This allows your team to define and manage dependencies and configurations for any project. Currently, DataTrovo supports the following Git repositories: GitHub","title":"Git Connection"},{"location":"dev-docs/git/#set-up-git-connections","text":"To connect to your Git repository in DataTrovo: Go to Settings > Secrets > + to add all required environment variables for your scripts. A symmetric key is used to encrypt environment variables. Go to Settings > Connections > + to create a new connection. Select one of the supported repository providers. Fill in the required connection details. A symmetric key is used to encrypt PAT keys. DataTrovo will test and save the connection.","title":"Set Up Git Connections"},{"location":"dev-docs/git/#syntactic-sugar","text":"\u201cSyntactic sugar\u201d in DataTrovo allows you to embed metadata in your scripts so the platform can automatically index it. This metadata can include: The following comment structure is used for the respective languages: Python: #> R: #> SQL: -->","title":"Syntactic Sugar"},{"location":"dev-docs/git/#required-metadata","text":"title \u2014 The script\u2019s title as displayed in DataTrovo. description \u2014 A brief script description displayed in DataTrovo. run \u2014 The command used to run the script. You can use {file_path} to reference the script. output \u2014 The name of the output file generated in the project\u2019s root directory.","title":"Required Metadata"},{"location":"dev-docs/git/#optional-metadata","text":"environment \u2014 A list of environment variables that the script requires.","title":"Optional Metadata"},{"location":"dev-docs/git/#additional-metadata-as-tags","text":"Any additional metadata beyond the above required fields is indexed as tags. This can include authors, dates, columns, or any other information. These tags are searchable and visible in the DataTrovo UI.","title":"Additional Metadata as Tags"},{"location":"dev-docs/git/#examples","text":".SQL Example : --> title: Top 100 facilities --> description: Download the top 100 facilities --> environment: [PGHOST, PGPORT, PGDATABASE, PGUSER, PGPASSWORD] --> columns: [facility_name, state, county] --> run: \"sh -c 'psql -f {file_path} --csv > output.csv'\" --> output: \"output.csv\" --> author: [John Doe] .R Example : #> title: R Top 100 facilities #> description: Download the top 100 facilities using R #> author: [R Master] #> environment: [PGHOST, PGPORT, PGDATABASE, PGUSER, PGPASSWORD] #> columns: [facility_name, state, county] #> run: \"Rscript {file_path}\" #> output: \"facilities_data.xlsx\"","title":"Examples"},{"location":"dev-docs/git/#docker","text":"Example Files: SQL Example R Example Each repository should include one Dockerfile in the root directory. This Dockerfile is used to build the execution environment for your scripts. The primary requirement is that the working directory be set to /app , as DataTrovo mounts your scripts into /app when the container starts. DataTrovo automatically rebuilds the Docker image whenever the Dockerfile changes, allowing you to modify scripts without incurring the overhead of a full image rebuild every time. This is achieved by volume-mounting the scripts into the container. However, this approach can cause certain limitations. For example, any dependencies installed in the project\u2019s root directory will be overwritten when the scripts are volume-mounted. This limitation can be avoided by installing dependencies in a temporary directory and copying the dependencies into the working directory at container startup. Example Operations in the Dockerfile : # Use a temporary directory for installing dependencies WORKDIR /opt/app # Install packages (e.g., using renv for R) RUN Rscript -e \"renv::restore()\" # Reset the working directory to /app WORKDIR /app # On container startup, copy the script into /app ENTRYPOINT [\"sh\", \"-c\", \"cp -r /opt/app/renv/library/ /app/renv/ && exec \\\"$@\\\"\", \"--\"] In this example, dependencies are installed in a subdirectory (/opt/app) , then the script is copied over at container startup, avoiding conflicts due to volume mounting.","title":"Docker"}]}